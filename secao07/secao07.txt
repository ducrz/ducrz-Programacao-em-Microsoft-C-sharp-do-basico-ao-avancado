Seção 7: Orientação a Objetos com C# - Parte 1


34. O que vamos aprender nesta seção?

35. Introdução à Orientação a Objetos


ORIENTAÇÃO A OBJETOS

A orientação a objetos é um paradigma de análise, projeto e programação de sistemas de software baseado
na composição e interação entre diversas unidades de software chamadas de objetos.

Na programação orientada a objetos, implementa-se um conjunto de classes que definem os objetos presentes
no sistema de software.

Em cada classe determinamos o seu comportamento e estados possíveis.

Também o relacionamento com outros objetos.


Conceitos

Classe representa um conjunto de objetos com características afins. Uma classe define o comportamento
dos objetos e quais estados ele é capaz de manter através de seus atributos. Exemplos de classe:

Os seres humanos, carros, casas, navios, etc.

Subclasse é uma nova classe que herda características de sua(s) classe(s) ancestral(is).

Um objeto é uma implementação de uma classe.


Classe: Define uma família de objetos.

Objeto: Implementa uma classe.


Exemplos:


CLASSES
________


VEÍCULOS > CARROS
	 > NAVIOS



PESSOA > PESSOA FÍSICA
       > PESSOA JURÍDICA



DOCUMENTO > RG
          > TÍTULO DE ELEITOR





36. Declarando classes

Criação de classes

CLASSE representa um conjunto de objetos com características afins.
Uma classe define o comportamento dos objetos, e quais estados ele é capaz de manter.

Exemplo de classe:

CARROS

Subclasse é uma nova classe que herda características de sua classe ancestral.



Para criar uma classem é preciso adicionar um arquivo de classe ao projeto.

namespace OOP{
	class Carro{

	}
}



Modificadores de Acesso:

Na OOP pode-se restringir o acsso a um membro de uma classe e ter assim mais controles sobre o conteúdo da classe.


Public- Os membros da classe não possuem qualquer restrição e podem ser acessados por qualquer programa.


Private - Os membros somente podem ser acessados à partir da própria classe.

Protected- Os membros são acessíveis à partir da própria classe e das classes derivadas.

Friend- Os membros são acessíveis somente dentro do programa que possuem a declaração da classe.

Protected Friend- Os membros são acessados somente pelo código de dentro do projeto e pelo código
na classe derivada.


CLASSE ABSTRATA

É uma classe que não terá implementação no "mundo real", é uma classe da qual futuramente vão derivar classes que estas sim
terão implementação real.

Podemos, por exemplo, ter uma classe abstrata Pessoa da qual herdarão as classes Física e Jurídica,
cada uma com seu próprio comportamento.


CLASSES


PESSOA > PESSOA FÍSICA
       > PESSOA JURÍDICA


Projeto ObjectOrientedProgramming


Solution Explorer > Add > New Item

Pessoa.cs

PessoaFisica.cs

PessoaJuridica.cs


New Folder - Organizar Classes.



37. Declarando atributos.

ATRIBUTOS são as características de um objeto.

Basicamente a estrutura de dados que vão representar a classe.

Exemplos: Funcionário: nome, endereco, telefone, cpf;
	  Carro: nome, marca, ano, cor;
	  Livro: autor, editora, ano.

Os atributos possuem valores. Por exemplo, o atributor cor pode conter o valor azul.
O conjunto de valores dos atributos de um determinado objeto é chamado de estado.


ATRIBUTO define as características de uma classe.


Pessoa(Classe Abstrata)            > Pessoa Física        > Pessoa Jurídica
-Nome: String                       -CPF: String           - CNPJ: String

Exemplos

Como criar propriedades?

Adicionamento uma linha de código na classe:

namespace OOP {

	class Carro {
		String Marca {get; set;}
	}
}


Acesso


É possível aplicar modificadores de acesso.

//Public
public string CPF { get; set;}

//Private
private string Tipo {get; }


Possível também manipular get e set.

//Atributo Read/Write
public string CPF {get; set;}

//Atributo Readonly
public string Tipo {get; }


Dica: prop 2xTab


Pessoa.cs

        public string Nome { get; set; }

        public string Sobrenome { get; set; }

        public int Idade { get; set; }



38. Declarando métodos

Definindo comportamento de classes.


MÉTODOS definem as habilidades dos objetos.

Viatura1 é uma instância da classe Carro, portanto ele pode, por exemplo, "dar partida" 
ou "acelerar", através dos métodos "DarPartida" e "Acelerar".

Um MÉTODO em uma classe é apenas uma definição.

A ação só ocorre quando o método é invocado através do objeto, no caso Viatura1.

Dentro do programa, a utilização de um método deve afetar apenas um objeto em particular.

Todos os carros podem dar partida, mas você quer que apenas a Viatura1 dê partida.

Normalmente, uma classe possui diversos métodos, que no caso da classe Carro poderiam ser
"DarPartida", "Acelerar" e "Parar", etc.


CLASSE: define uma família de objetos.

OBJETO: implementa uma classe.

ATRIBUTO: define as características de uma classe.

MÉTODO: define o que aquela classe pode ou não realizar.


Para adicionar uma funcionalidade em uma classe, é possível adicionar uma função:


namespace OOP{

	class Carro{
		String Marca {get; set; }	

		void DarPartida(){

		}
	}
}


CLASSES


PESSOA                   PESSOA FÍSICA         PESSOA JURÍDICA
-Nome:String             - CPF:String          -CNPJ: String
ValidarDocumento          ValidarCPF            ValidarCNPJ



Veiculo.cs
Carro.cs

ASSINATURAS DE MÉTODO

Os métodos são declarados em uma classe especificando o nível de acesso, como public ou private,
modificadores opcionais, como abstract ou sealed, o valor retornado, o nome do método e os
parâmetros de método.

Junas, estas partes são a assinatura do método.


Obs: Um tipo de retorno de um método não faz parte da assinatura do método para fins de sobrecarga 
de método.
No entando, ele faz parte da assinatura do método.


Argumentos por referência ou por valor

Métodos com argumentos por referência e por valor:

public static void Main(){

	int valor=40;
	
	func(ref valor);
	
	Console.WriteLine("Hello World " + valor);
}

public static void func(ref int val){

	val++;

}

Parâmetros Opcionais

Métodos com parâmetros opcionais

public static voi Main(){

	int valor = 40;
	func(ref valor);
	
	Console.WriteLine("Hello World "+valor);

}

public static void func(ref int val, int incremento=0){

	if(incremento == 0)
		val++;
	else
		val= val +incremento;

}

Program.cs

TIPOS DE CLASSES


Tipos de Classes são passados por referência.

Objetos são sempre passados por referência.



39. Instanciando objetos

Em programação orientada a objetos, chama-se instância de uma classe, um objeto cujo comportamento
e estado são definidos pela classe.

O uso da palavra "instância" pode ter sido inspirado no inglês, tal palavra significa "caso" ou
"exemplo", em inglês, instance.


INSTÂNCIA DE UM OBJETO

Imaginemos um objeto Pessoa, este objeto representa uma pessoa, mas se quiser dar um identidade a este objeto
temos que instanciá-lo.

É uma forma de representação de base de um grupo de objetos.

CLASSES

Uma classe é uma representação de base de um grupo de objetos.


Um objeto é uma instância de uma classe.


COMO É FEITO NO C#

Lembrando que tudo no .NET é objeto, tudo vêm de uma classe.


//Implementação da classe String num objeto chamado NUM
String num = new String();


//Chamando um método do objeto
Var x = num.Trim();


//Acessando uma propriedade do objeto
var x = num.Length;



//Implementação da classe Pessoa em um objeto chamado Han Solo
Pessoa Han = new Pessoa();

//Chamando um método do objeto
Han.Atira();


//Acessando uma propriedade do objeto
Console.WriteLine(Han.Profissao);


Exercícios

Carro.cs e Program.cs

Um objeto é uma instância de uma classe. Uma representação real de algo que o negócio precisa representar.

Um objeto é uma representação real de uma classe.



40. Método construtor


O que é?

É um método de toda classe que é chamado no momento de criação de um objeto.

Este método é sempre chamado uma vez que utilizamos a palavra chave "new Classe()".

Mesmo que não esteja explícito, toda classe tem um construtor padrão.

Este construtor padrão não tem parâmetros.


Esta classe veículo possui um construtor padrão que será chamado ao criar um objeto do tipo veículo.

public class Veiculo{

	public string Modelo { get; set; }
	public int Ano { get; set; }

}


Como Definir um Construtor

Definindo um construtor sem parâmetros

public class Veiculo{
	public string Modelo { get; set; }
	public int Ano { get; set; }

	public Veiculo(){

	}
}

O Construtor de uma classe deve sempre ter o mesmo nome da classe.


Exemplo:

public class Veiculo{

	public string Modelo { get; set; }
	public int Ano {get; set; }
	
	public Veiculo(){
		Console.WriteLine("Construtor da classe veículo");
	}
}

Ao criar um objeto do tipo veículo, o construtor será chamado.



Construtor com Parâmetros

É possível passar parâmetros para um construtor e realizar operações com isto:


public class Veiculo{

	public string Modelo { get; set; }
	public int Ano { get; set;  }

	public Veiculo(string TipoVeiculo){
		Console.WriteLine($"Estou construindo um veículo do tipo: {TipoVeiculo}");

	}

}



Um problema comum de programação é as propriedades que são obrigatórias.

Pdeomos supor que para o negócio de alugar carros, toda vez que adiciono um carro a minha frota,
vou querer que os campos Marca e Modelo sejam informados no momento da criação do objeto.


public class Veiculo{

	public string Marca { get; set; }
	public string Modelo { get; set; }
	public int Ano { get; set; }

	public Veiculo(string Marca, string Modelo){
		Console.WriteLine($"Estou construindo um veículo marca { Marca} e modelo { modelo } ");

	}

}

Usando um construtor para inicializar as propriedades Marca e Modelo

public class Veiculo{

	public string Marca { get; set; }
	public string Modelo { get; set; }
	public int Ano { get; set; }

	public Veiculo(string Marca, string Modelo){
		this.Marca = Marca;
		this.Modelo = Modelo;
	} 
}


Neste exemplo foi usado um construtor para inicializar proprieades públicas da classe.

Isto não é uma boa prática porque permite que qualquer acesso externo do objeto criado possa
alterar o estado do objeto.

As propriedades poderiam estar disponíveis para leitura, mas a sua escrita (set, mudança de valor)
deveria ser controlada pela própria classe.

Isto é chamado de ENCAPSULAMENTO.




41. Encapsulamento

42. Recapitulando