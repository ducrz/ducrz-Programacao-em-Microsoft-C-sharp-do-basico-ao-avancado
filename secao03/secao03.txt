Seção 3: C# Básico


12. O que vamos aprender nesta seção?

Elementos da linguagem.
Introdução a linguagem C#.

Variáveis, tipos de dados, alcance.

Operadores lógicos, aritméticos e de atribuição.

Estruturas condicionais simples.

Estruturas condicionais aninhadas.

Estruturas de repetição, while, do while e for.



13. Elementos da linguagem C#

Linguagem de programação orientada a objetos, fortemente tipiada, desenvolvida pela Microsoft como parte da plataforma .NET.

Baseada no C++ mas inclui influências de outras linguagens como o Object Pascal e Java.


Características

Simplicidade;
Completamente orientada a Objetos;
Fortemente Tipada;
Gera código gerenciado: o ambiente .NET é gerenciado, também é o C#;
Tudo é um objeto: System.Object é a classe base de todo o sistema;
Controle de Versões: cada assembly gerado, seja como EXE ou DLL, tem informação sobre a versão do código.
Suporte a código legado;
Flexibilidade;
Linguagem Gerenciada: todo o gerenciamento de memória é feito pelo runtime via o GC (Garbage Collector).


Novo projeto no Visual Studio > Console App (.NET Framework).



Elementos básicos de um projeto Console:


Function main

Args{}

Console
	Write
	WriteLine
	ReadKey


MeuProjeto 1 2 3 - Passando valores

Args[]={"1","2","3"} - Array


Passagens de parâmetros para controle de comportamento do programa.


namespace - Não é obrigatório serve para organizar o código/projeto, todas funções relacionadas a data por exemplo,
podem estar em um namespace.


Importando: using nomeclasse.namespace;



14. Variáveis, tipos de dados e alcance


Variável - lugar usado para armazenar informações que podem sofrer ou não alterações durante a execução de um programa.

São usadas para guardar valores que serão usados durante o decorrer do programa, também para guardar informações
fornecidas pelo usuário e que serão exibidas mais tarde.

Cada variável usada é identificada por um nome e por um tipo.


É possível guardar informações de diversos tipos em uma variável.


Uma variável tem um nome e um tipo de dado que será armazenado.

Quando você guarda uma informação em uma variável, está usando a memória do computador para isto.

Quanto maior a informação guardada, mais memória será usada, dependendo do tipo de variável usada.



Para cálculos:  Integer
		Long, Single e Decimal - mais uso de memória.


Cada tipo C# aponta (é um atalho) para o tipo .NET Framework.


TIPOS DE DADOS C#

C# Type         .NET Framework type
Bool            System.Boolean
Byte            System.Byte
Sbyte           System.SByte
Char            System.Char
Decimal         System.Decimal
Double          System.Double
Float           System.Single
Int             System.Int32
Uint            System.UInt32
Long            System.Int64
Ulong           System.UInt64
Object          System.Object
Short           System.Int16
Ushort          SystemUInt16
String          System.String

Isso quer dizer que se declararmos a variável desta forma:


string nome;

ou

System.String nome;


Nas duas formas, o resultado será o mesmo, o atalho serve apenas para facilitar no desenvolvimento.

Este atalho é definido na forma de uma instrução "using";


DECLARANDO VARIÁVEIS

São diferentes formas de declarar variáveis em C#:

int a;

double area = 0;

int salario, imposto, soma;


int contador = 10;

string nome;

string nomeCompleto = "Visual Studio";




Tipos de Variáveis e os valores armazenáveis em C#


C# Type                 Valores Possíveis
Bool			Verdadeiro ou Falso (booleano)
Byte			0 a 255 (8 bits)
Sbyte			-128 à 127 (8 bits)
Char			Um caractere (16 bits)
Decimal 		+-1.0 x 10-28 à +-7.9x1028 (128 bits)
Double			+-5.0 x 10-324 à {- 1.7 x 10308 (64 bits)
Float			+-1.5 x 10-45 à +-3.4 x 1038 (32 bits)
Int			-2,147,483,648 à 2,147,483,647(32 bits)
Uint			0 a 4,294,967,295 (32 bits)
Long			-9,223,372,036,854,775,808 à -9,223,372,036,854,775,807 (64 bits)
Ulong			0 à 18,446,744,073,709,551,615 (64 bits)
Object			Qualquer tipo.
Short			-32,768 à 32,767 (16 bits)
Ushort			0 a 65,535 (16 bits)
String			Sequência de caracteres (16 bits por caractere)



Alcance de variáveis / Modificadores de Acesso


public: o acesso não é restrito

protected: o acesso é limitado a classe ou a tipos derivados da classe recipiente.


internal: o acesso é limitado ao conjunto de módulos (assembly) corrente.

protected internal: o acesso é limitado ao conjunto corrent ou tipos derivados da classe recipiente.

private: o acesso é limitado ao tipo de recipiente.



Para retornar o tipo de qualquer vairável do C# é possível usar o método GetType();

Console.WriteLine(variavel.GetType());




15. Operadores lógicos, aritméticos e de atribuição


OPERADORES


PROPÓSITO                               C#
Divisão de inteiros			/
Módulo (divisão retornando o resto)     %
Multiplicação				*
Concatenar Strings			+
Incremento Postfix			++
Decremento Postfix			--

Atribuição				=
Soma e Atribui				+=
Subtrai e atribui			-=


Igual					==
Não igual				!=
Lógico-NOT				!
Lógico-AND				&&
Lógico-OR				||
Condicional				?:



Exemplo:

int contador;

contador = 2;

contador = contador + 40;


Outra maneira mais prática:

contador += 40;

ou

contador -= 23;


16. Estruturas condicionais simples

Uma estrutura condicional é uma forma de controlar o fluxo de uma aplicação.


Dada uma determinada condição, podemos entregar um valor ou outro, realizar uma operação ou outra.

Estruturas condicionais são baseadas em álgebra booleana.




Um exemplo seria, que para realizar uma certa operação, seja necessário preencher uma condição da.a


Exemplo:

usuarioIdade >= 18 anos


 //Restringir por idade

            Console.Write("Digite a sua idade: ");
            string valor = Console.ReadLine();

            int idadeUsuario = Convert.ToInt16(valor);

            int regraIdadeLimite = 18;

            if (idadeUsuario >= regraIdadeLimite)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Entrada Permitida ao Sistema!");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Entrada Não Permitida ao Sistema!");
            }
            Console.ReadKey();


Operadores Matemáticos (+,-,* e /).


 //Calculadora Simples

            //Console.Write("Digite o primeiro valor: ");
            //string valor1 = Console.ReadLine();

            //while (Convert.ToInt32(valor1) == 0)
            //{
            //    Console.WriteLine("Valor Inválido. Digite o Primeiro Valor Novamente: ");
            //    valor1 = Console.ReadLine();

            //}

            //Console.WriteLine();

            //Console.Write("Insira o segundo valor: ");
            //string valor2 = Console.ReadLine();


            //while (Convert.ToInt32(valor2) == 0)
            //{
            //    Console.WriteLine("Valor Inválido. Digite o Segundo Valor Novamente: ");
            //    valor2 = Console.ReadLine();

            //}

            //Console.WriteLine();

            //Console.Write("Insira o Operador (+),(-),(*) ou (/): ");
            //string operador = Console.ReadLine();
            //decimal resultado = 0;

            //if(operador == "+")
            //    resultado = Convert.ToInt32(valor1) + Convert.ToInt32(valor2);
            //if (operador == "-")
            //    resultado = Convert.ToInt32(valor1) - Convert.ToInt32(valor2);
            //if (operador == "*")
            //    resultado = Convert.ToInt32(valor1) * Convert.ToInt32(valor2);
            //if (operador == "/")
            //    resultado = Convert.ToInt32(valor1) / Convert.ToInt32(valor2);

            //Console.WriteLine("O Resultado é: "+resultado);

            //Console.ReadKey();


 //Sistema de Login

            string usuarioSistema = "usuario";
            string senhaSistema = "123";


            Console.Write("Digite o nome do Usuário: ");
            string usuarioInserido = Console.ReadLine();

            Console.WriteLine();


            Console.Write("Digite a senha: ");
            string senhaInserida = Console.ReadLine();

            Console.WriteLine();


            if (usuarioInserido != usuarioSistema || senhaInserida != senhaSistema){
                Console.ForegroundColor = ConsoleColor.Red;

                Console.WriteLine("Usuario ou Senha Incorretos! ");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Bem-vindo ao Sistema!");
            }           

            Console.ReadKey();



17. Estruturas condicionais aninhadas

São condições, dentro de outras condições. Exemplo: Ifs aninhados



Nova condição.

Para acessar o sistema, o usuário menor de 18 e maior de 13 anos precisará de consentimento parental.

else if (senão se)

 //Controle de Idade
            int regraIdadeLimite = 18;

            Console.Write("Digite a sua idade: ");
            string idade = Console.ReadLine();
            int idadeUsuario = Convert.ToInt16(idade);

            if(idadeUsuario >= regraIdadeLimite)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Entrada Permitida! ");
            }
            else if(idadeUsuario >= 13 && idadeUsuario < regraIdadeLimite)
            {
                Console.Write("Consentimento Parental? (S) ou (N) ");
                string consentimento = Console.ReadLine();
                if(consentimento == "S")
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Entrada Permitida! ");
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Entrada Não Permitida! ");
                }
                   
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Entrada Não Permitida! ");
            }
            Console.ReadKey();


Problemas: Deixa o código menos legível, difícil de manter e podem gerar erros difíceis de ser encontrados depois.

Se existir muitos IFs aninhados, pode-se criar o que os programadores chamam de "código hadouken".



Exercício:

Modificar o Sistema de Login

Apresentar mensagens personalizadas para usuário homem, mulher e criança.

//Sistema de Login Exercício

            string usuarioSistema = "usuario";
            string senhaSistema = "123";


            Console.Write("Digite o nome do Usuário: ");
            string usuarioInserido = Console.ReadLine();

            Console.WriteLine();

            Console.Write("Digite a Idade do Usuário: ");
            string idadeUsuario = Console.ReadLine();
            int idadeInformada = Convert.ToInt32(idadeUsuario);


            Console.WriteLine();

            Console.Write("Digite o Sexo do Usuário: (M) ou (F) ");
            string sexoUsuario = Console.ReadLine();


            Console.WriteLine();


            Console.Write("Digite a senha: ");
            string senhaInserida = Console.ReadLine();

            Console.WriteLine();


            if (usuarioInserido != usuarioSistema || senhaInserida != senhaSistema)
            {
                Console.ForegroundColor = ConsoleColor.Red;

                Console.WriteLine("Usuario ou Senha Incorretos! ");
            }
            else
            {

                if (idadeInformada > 18 && sexoUsuario == "M")
                {
                    //Homem
                    Console.ForegroundColor = ConsoleColor.DarkGreen;
                    Console.WriteLine("Bem-vindo ao Sistema!");
                }
                else if (idadeInformada > 18 && sexoUsuario == "F")
                {
                    //Mulher
                    Console.ForegroundColor = ConsoleColor.DarkMagenta;
                    Console.WriteLine("Bem-vindo ao Sistema!");
                }
                else if (idadeInformada > 12 && idadeInformada < 18)
                {
                    //Adolescente
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.WriteLine("Bem-vindo ao Sistema!");
                }
                else if (idadeInformada < 12)
                {
                    //Criança
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Bem-vindo ao Sistema!");
                }

            }

            Console.ReadKey();
		





18. Estruturas de repetição

While, do while, for

São comandos da linguagem que permitem executar um determinado bloco de código repetidamente.

A quantidade de vezes que o bloco de código é executado depende de condições programáveis.

Estas estruturas de repetição são chamadas de loops ou bucles.

São muito úteis para iterar (percorrer) elementos de uma lista ou array por exemplo.

C# tem três tipos de loops ou estruturas de repetição:

For
Do While
While

Além disto existe o ForEach.



WHILE


ENQUANTO CONDIÇÃO TRUE > EXECUTA BLOCO DE CÓDIGO
		  FALSE > SAI DO LOOP




INSTRUÇÃO FOR

É uma estrutura de repetição onde a condição do loop é de incremente (ou decremento) numérico.

for(int i=0; i <5; i++){

	Console.WriteLine(i);

}

Para um valor de i igual a 0, repita o loop enquanto o valor de i for menor a 5, incremente em 1 o valor 
de i a cada iteração.



Visual Studio > for mais duas vezes a tecla tab, completa o for.



INSTRUÇÃO WHILE
Estrutura de repetição onde o bloco de código é executado toda vez que uma condição booleana (true/false) é satisfeita.

Enquanto i valer menos que 5, repita!

int i=0;

while (i < 5){
	Console.WriteLine(i);
	++i;
}

Não existe contador no cabeçalho da instrução!

While é muito indicado para quando temos condições booleanas.

string[] nomes = new string [5]{ "Paulo", "Eduardo", "Francisco","João","Pedro"};
int I =0;

while (nomes[i] != ""){

	Console.WriteLine(nomes[i]);
	++i;

}


DO WHILE

É uma estrutura de repetição onde o bloco de código é executado pelo menos uma vez e logo após
é que uma condição booleana (true/false) é satisfeita.

Faça, bloco de código, enquanto i valer menos que 5, repita.


int i=0;

Do {

	Console.WriteLine(i);
	i++;

} while (i < 5);


Instrução BREAK

É uma instrução que quebra imediatamente a execução de um loop.

int i = 0;
do {
	Console.WriteLine(i);
	i++;
	if(i <5)
		break

}while(true);





19. Recapitulando